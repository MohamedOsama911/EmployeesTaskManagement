/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etmswing;

/**
 *
 * @author omar3
 */
import static etmswing.MainETM.Formicon;
import static etmswing.MainETM.postponedTasksList;
import static etmswing.MainETM.empsList;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class RequestedPostponedTasks extends javax.swing.JFrame {

    /**
     * Creates new form RequestedPostponedTasks
     */
    DefaultTableModel tabelRequestedTasks;

    private String email;
    private String requiredDate;
    private Task task;
    public RequestedPostponedTasks() {
        setResizable(false);
        initComponents();
        Image icon=new ImageIcon(this.getClass().getResource(Formicon)).getImage();
        this.setIconImage(icon);
        tabelRequestedTasks = (DefaultTableModel) data.getModel();
        data.getTableHeader().setFont(new Font("Franklin Gothlic Meduim Cond",Font.PLAIN,12));
        data.getTableHeader().setOpaque(false);
        data.getTableHeader().setBackground(new Color(51, 51, 51));
        data.getTableHeader().setForeground(new Color(204, 204, 204));
        System.out.println(postponedTasksList.size());
        if (!postponedTasksList.isEmpty()) {
            for (int i = 0; i < postponedTasksList.size(); i++) {
                Object[] displayRequestedTasks = {
                    postponedTasksList.get(i).employeeEmail,
                    empsList.get(postponedTasksList.get(i).employeeEmail).name,
                    postponedTasksList.get(i).RequiredEndDate,
                    postponedTasksList.get(i).pTask.title,
                    postponedTasksList.get(i).pTask.priority,
                    postponedTasksList.get(i).pTask.description,
                    postponedTasksList.get(i).pTask.assignedDate,
                    postponedTasksList.get(i).pTask.endDate,
                    postponedTasksList.get(i).pTask,
                };
                tabelRequestedTasks.addRow(displayRequestedTasks);
            }
        }
        else{
            approve_error_message.setText("No Requested Tasks To Postpone");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        return_manager = new javax.swing.JButton();
        approveBtn = new javax.swing.JButton();
        declineBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        approve_error_message = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        data = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EOM Employee Task Manager");
        setMaximumSize(new java.awt.Dimension(1070, 600));
        setMinimumSize(new java.awt.Dimension(1070, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        return_manager.setBackground(new java.awt.Color(51, 51, 51));
        return_manager.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 14)); // NOI18N
        return_manager.setForeground(new java.awt.Color(204, 204, 204));
        return_manager.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dashboard_24.png"))); // NOI18N
        return_manager.setText("Manager Dashboard");
        return_manager.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 204, 204)));
        return_manager.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        return_manager.setFocusPainted(false);
        return_manager.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                return_managerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                return_managerMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                return_managerMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                return_managerMouseReleased(evt);
            }
        });
        return_manager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_managerActionPerformed(evt);
            }
        });
        getContentPane().add(return_manager, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 180, 40));

        approveBtn.setBackground(new java.awt.Color(51, 51, 51));
        approveBtn.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 14)); // NOI18N
        approveBtn.setForeground(new java.awt.Color(204, 204, 204));
        approveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/tick_ok.png"))); // NOI18N
        approveBtn.setText("Approve");
        approveBtn.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 204, 204)));
        approveBtn.setFocusPainted(false);
        approveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                approveBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                approveBtnMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                approveBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                approveBtnMouseReleased(evt);
            }
        });
        approveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveBtnActionPerformed(evt);
            }
        });
        getContentPane().add(approveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 510, 180, 40));

        declineBtn.setBackground(new java.awt.Color(51, 51, 51));
        declineBtn.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 14)); // NOI18N
        declineBtn.setForeground(new java.awt.Color(204, 204, 204));
        declineBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/decline.png"))); // NOI18N
        declineBtn.setText("Decline");
        declineBtn.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(204, 204, 204)));
        declineBtn.setFocusPainted(false);
        declineBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                declineBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                declineBtnMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                declineBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                declineBtnMouseReleased(evt);
            }
        });
        declineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineBtnActionPerformed(evt);
            }
        });
        getContentPane().add(declineBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, 180, 40));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/list_36.png"))); // NOI18N
        jLabel2.setText("Requested Tasks to Postpone");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 470, 50));

        approve_error_message.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 18)); // NOI18N
        approve_error_message.setForeground(new java.awt.Color(185, 63, 63));
        approve_error_message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        approve_error_message.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(approve_error_message, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 470, 660, 30));

        data.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 18)); // NOI18N
        data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Email", "Employee Name", "Required End Date", "Task Title", "Task Priority", "Task Description", "Task Assign Date", "Task End Date", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        data.setFillsViewportHeight(true);
        data.setFocusable(false);
        data.setGridColor(new java.awt.Color(51, 51, 51));
        data.setIntercellSpacing(new java.awt.Dimension(0, 0));
        data.setRowHeight(25);
        data.setSelectionBackground(new java.awt.Color(102, 102, 102));
        data.setSelectionForeground(new java.awt.Color(204, 204, 204));
        data.setShowVerticalLines(false);
        data.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(data);
        if (data.getColumnModel().getColumnCount() > 0) {
            data.getColumnModel().getColumn(4).setPreferredWidth(30);
            data.getColumnModel().getColumn(8).setMinWidth(0);
            data.getColumnModel().getColumn(8).setPreferredWidth(0);
            data.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1010, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1010, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 1010, 390));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/background.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(1070, 600));
        jLabel1.setMinimumSize(new java.awt.Dimension(1070, 600));
        jLabel1.setPreferredSize(new java.awt.Dimension(1070, 600));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 600));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //return_manager button actions
    private void return_managerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_managerActionPerformed
        ManagerForm managerForm = new ManagerForm();
        managerForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_return_managerActionPerformed

    private void return_managerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_return_managerMouseEntered
        setHoverColor(return_manager);
        managerBtn_over = true;
    }//GEN-LAST:event_return_managerMouseEntered

    private void return_managerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_return_managerMouseExited
        setResetColor(return_manager);
        managerBtn_over = false;
    }//GEN-LAST:event_return_managerMouseExited

    private void return_managerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_return_managerMousePressed
        setPressColor(return_manager);
    }//GEN-LAST:event_return_managerMousePressed

    private void return_managerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_return_managerMouseReleased
        if (managerBtn_over) {
            setHoverColor(return_manager);
        } else {
            setResetColor(return_manager);
        }
    }//GEN-LAST:event_return_managerMouseReleased
    /////////////////////////////////////////////////////////////////////////////////////

    //approve button actions
    private void approveBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_approveBtnMouseReleased
        if (approve_over) {
            setHoverColorConfirm(approveBtn);
        } else {
            setResetColor(approveBtn);
        }
    }//GEN-LAST:event_approveBtnMouseReleased

    private void approveBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_approveBtnMousePressed
        setPressColor(approveBtn);
    }//GEN-LAST:event_approveBtnMousePressed

    private void approveBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_approveBtnMouseExited
        setResetColor(approveBtn);
        approve_over = false;
    }//GEN-LAST:event_approveBtnMouseExited

    private void approveBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_approveBtnMouseEntered
        setHoverColorConfirm(approveBtn);
        approve_over = true;
    }//GEN-LAST:event_approveBtnMouseEntered

    private void approveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveBtnActionPerformed
        approve_error_message.setText("");
        int row = data.getSelectedRow();
        if (row >= 0) {
            email = data.getModel().getValueAt(row, 0).toString();   //Get the Selected EMP Email
            requiredDate = data.getModel().getValueAt(row, 2).toString();   //Get the Selected Required end date
            task = (Task)data.getModel().getValueAt(row, 8);   //Get the Selected Task
            task.editEndDate(requiredDate);
            Collections.sort(empsList.get(email).list);
            if (!postponedTasksList.isEmpty()) {
                for (int i = 0; i < postponedTasksList.size(); i++) {                   
                    if (postponedTasksList.get(i).employeeEmail.equals(empsList.get(email).email) && postponedTasksList.get(i).pTask == task) {
                            postponedTasksList.remove(i);
                    }
                }            
            }
            tabelRequestedTasks.removeRow(row);    
            if(postponedTasksList.isEmpty())
            {
                approve_error_message.setText("No Requested Tasks To Postpone");
            }        
        }
        else if(postponedTasksList.isEmpty())
        {
            approve_error_message.setText("No Requested Tasks To Postpone");
        } 
        else
        {
            approve_error_message.setText("Select a task first");
        }

    }//GEN-LAST:event_approveBtnActionPerformed
    /////////////////////////////////////////////////////////////////////////////////////

    // decline button actions
    private void declineBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_declineBtnMouseEntered
        setHoverColorDecline(declineBtn);
        declineBtn_over = true;
    }//GEN-LAST:event_declineBtnMouseEntered

    private void declineBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_declineBtnMouseExited
        setResetColor(declineBtn);
        declineBtn_over = false;
    }//GEN-LAST:event_declineBtnMouseExited

    private void declineBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_declineBtnMousePressed
        setPressColor(declineBtn);
    }//GEN-LAST:event_declineBtnMousePressed

    private void declineBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_declineBtnMouseReleased
        if (declineBtn_over) {
            setHoverColorDecline(declineBtn);
        } else {
            setResetColor(declineBtn);
        }
    }//GEN-LAST:event_declineBtnMouseReleased

    private void declineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineBtnActionPerformed
        approve_error_message.setText("");
        int row = data.getSelectedRow();
        if (row >= 0) {
            email = data.getModel().getValueAt(row, 0).toString();   //Get the Selected EMP Email
            requiredDate = data.getModel().getValueAt(row, 2).toString();   //Get the Selected Required end date
            task = (Task)data.getModel().getValueAt(row, 8);   //Get the Selected Task
            if (!postponedTasksList.isEmpty()) {
                for (int i = 0; i < postponedTasksList.size(); i++) {                   
                    if (postponedTasksList.get(i).employeeEmail.equals(empsList.get(email).email) && postponedTasksList.get(i).pTask == task) {
                            postponedTasksList.remove(i);
                            break;
                    }
                }            
            }
            tabelRequestedTasks.removeRow(row);
            if(postponedTasksList.isEmpty())
            {
                approve_error_message.setText("No Requested Tasks To Postpone");
            }
        }
        else if(postponedTasksList.isEmpty())
        {
            approve_error_message.setText("No Requested Tasks To Postpone");
        } 
        else
        {
            approve_error_message.setText("Select a task first");
        }

    }//GEN-LAST:event_declineBtnActionPerformed
    /////////////////////////////////////////////////////////////////////////////////////

    private void setClickColor(javax.swing.JButton b) {
        b.setBackground(new Color(204, 204, 204));
    }
    private void setPressColor(javax.swing.JButton b) {
        b.setBackground(new Color(153, 153, 153));
    }
    private void setHoverColor(javax.swing.JButton b) {
        b.setBackground(new Color(102, 102, 102));
    }
    private void setResetColor(javax.swing.JButton b) {
        b.setBackground(new Color(51, 51, 51));
    }    
    
    private void setHoverColorConfirm(javax.swing.JButton b) {
        b.setBackground(new Color(0,153,0));
    }
    private void setHoverColorDecline(javax.swing.JButton b) {
        b.setBackground(new Color(153,0,0));
    }
    /**
     * @param args the command line arguments
     */
    private boolean approve_over;
    private boolean managerBtn_over;
    private boolean declineBtn_over;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RequestedPostponedTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RequestedPostponedTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RequestedPostponedTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RequestedPostponedTasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RequestedPostponedTasks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveBtn;
    private javax.swing.JLabel approve_error_message;
    private javax.swing.JTable data;
    private javax.swing.JButton declineBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton return_manager;
    // End of variables declaration//GEN-END:variables
}
